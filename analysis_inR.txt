
class_ok = read.csv("class_ok.tsv", sep="\t")  # MIRBASE classification

############################################################  FEATURES HEATMAP  #######################################################

library(pheatmap)
library(RColorBrewer)

ks.test()
##################################### MIRBASE

features_analysis_mirbase = read.table("1917_tab_features_normalized", sep=" ", check.names = F)
miRNA_names <- sub(" .*", "", rownames(features_analysis_mirbase)) # Extract miRNA names from row names
features_analysis_mirbase$mirna_name <- miRNA_names
features_analysis_mirbase <- features_analysis_mirbase[, c("mirna_name", setdiff(names(features_analysis_mirbase), "mirna_name"))]
features_analysis_mirbase = features_analysis_mirbase[,1:125]

# merging 
tab_features = merge(features_analysis_mirbase, class_ok, by="mirna_name")
rownames(tab_features) <- tab_features[,1]
tab_features = tab_features[,2:125]

# Transpose
feat_t <- t(tab_features)

# Set row names for mir_well
mir_well <- class_ok[,-1]
mir_well <- as.data.frame(mir_well)
rownames(mir_well) <- colnames(feat_t)

# Define colors for classes
class_colors <- list(class = c("Dispensable" = "red", "Inducible" = "blue", "Resilient" = "green", "Spurious" = "violet"))
class_colors_new = list(class = c("Dispensable" = "red", "Inducible" = "blue", "Resilient" = "red", "Spurious" = "blue"))

# processing data
feat_zero=apply(feat_t==0,1,sum)!=ncol(feat_t)
df_feat_t_zero = feat_t[feat_zero,]
avg <- apply(df_feat_t_zero, 1, mean)
std <-sqrt(apply(df_feat_t_zero, 1, var))
standard_df<-(df_feat_t_zero-avg)/std

df_feat_t_zero[,">hsa-mir-4712"]


hist(standard_df)
#scaled_df_mirbase <- t(apply(df_feat_t_zero, 1, function(row) {
#  row / medians
#}))

hist(df_feat_t_zero)

# Create HEATMAP 
pdf("pheatmap_featuresSCALED_mirbase.pdf")
pheatmap(
  mat               = scaled_df_mirbase,#feat_t[feat_zero,],
  scale = "none",
  border_color      = TRUE,
  show_colnames     = FALSE,
  show_rownames     = TRUE,
  annotation_col    = mir_well,
  #annotation_colors = class_colors_new,
  drop_levels       = TRUE,
  fontsize          = 6,
  main              = "Heatmap",
  annotation_line_width = 2,  
  cluster_rows      = TRUE,   
  cluster_cols      = TRUE   
)
dev.off()




# Ensure mir_well is a factor with desired levels
mir_well <- factor(mir_well$mir_well, levels = c("Dispensable", "Resilient", "Inducible", "Spurious"))

# Define colors for each category
color_vector <- ifelse(mir_well %in% c("Dispensable", "Resilient"), "red", "blue")

# Generate the heatmap with customized annotation colors
pdf("pheatmap_featuresSCALED_mirbase.pdf")
pheatmap(
  mat               = scaled_df_mirbase,
  scale             = "none",
  border_color      = TRUE,
  show_colnames     = FALSE,
  show_rownames     = TRUE,
  annotation_col    = mir_well,
  annotation_colors = list(mir_well = color_vector), # Apply custom colors
  drop_levels       = TRUE,
  fontsize          = 6,
  main              = "Heatmap",
  annotation_line_width = 2,  
  cluster_rows      = TRUE,   
  cluster_cols      = TRUE   
)
dev.off()





# BOXPLOTS for features 
boxplot_list <- list()
# Loop through each feature
pdf("boxplots_featuresSCALED_mirbase.pdf")
for (feature in rownames(feat_t)) {
  # Subset the data for the current feature and create a boxplot
  plot_data <- data.frame(value = feat_t[feature, ], class = mir_well[, 1])
  boxplot_obj <- boxplot(value ~ class, data = plot_data, main = paste("Boxplot for", feature),
                         xlab = "Class", ylab = "Feature Value")
  # Store the boxplot in the list
  boxplot_list[[feature]] <- boxplot_obj
}
dev.off()


################################ MIRGENE

mirgene_names = read.csv("mirgene_mrna_names.txt", header=F)
# mirgene data extraction
mirgene_classes <- class_ok[class_ok$mirna_name %in% mirgene_names$V1, ]

tab_features_mirgene = merge(features_analysis_mirbase, mirgene_classes, by="mirna_name")
rownames(tab_features_mirgene) <- tab_features_mirgene[,1]
tab_features_mirgene = tab_features_mirgene[,2:125]

# Transpose
feat_t_mirgene <- t(tab_features_mirgene)

# Set row names for mir_well
mir_well_mirgene <- mirgene_classes[,-1]
mir_well_mirgene <- as.data.frame(mir_well_mirgene)
rownames(mir_well_mirgene) <- colnames(feat_t_mirgene)

# processing data
feat_zero_mirgene=apply(feat_t_mirgene==0,1,sum)!=ncol(feat_t_mirgene)
df_feat_t_zero_mirgene = feat_t_mirgene[feat_zero_mirgene,]
range <- apply(df_feat_t_zero_mirgene,1,max)/apply(df_feat_t_zero_mirgene,1,mean)
heatmap(df_feat_t_zero_mirgene[,range<=5],scale="none")
#medians <- apply(df_feat_t_zero_mirgene, 1, mean)
#scaled_df_mirgene <- t(apply(df_feat_t_zero_mirgene, 1, function(row) {
# row / medians
#}))
#####
avg_mirgene <- apply(df_feat_t_zero_mirgene, 1, mean)
std_mirgene <-sqrt(apply(df_feat_t_zero_mirgene, 1, var))
standard_df_mirgene <-(df_feat_t_zero_mirgene-avg_mirgene)/std_mirgene
hist(standard_df_mirgene)
heatmap(standard_df_mirgene[,range<=5], scale="none")


# Remove useless features 
standard_df_mirgene_nobulges = standard_df_mirgene[c(1:73, 99:106),]
heatmap(standard_df_mirgene_nobulges, scale="none")



# Define colors for classes
class_colors <- list(class = c("Dispensable" = "red", "Inducible" = "blue", "Resilient" = "green", "Spurious" = "violet"))

# Create HEATMAP 
pdf("pheatmap_featuresSCALED_mirgene.pdf")
library(pheatmap)
pheatmap(
  mat               = standard_df_mirgene, #scaled_df_mirgene, #feat_t_mirgene,
  scale = "none",
  border_color      = TRUE,
  show_colnames     = FALSE,
  show_rownames     = TRUE,
  annotation_col    = mir_well_mirgene,
  annotation_colors = class_colors,
  drop_levels       = TRUE,
  fontsize          = 6,
  main              = "Heatmap",
  annotation_line_width = 2,  
  cluster_rows      = TRUE,   
  cluster_cols      = TRUE   
)
dev.off()

#################  BOXPLOTS for features 
boxplot_list_mirgene <- list()
pdf("boxplots_featuresSCALED_mirgene.pdf")
for (feature in rownames(feat_t_mirgene)) {
  plot_data <- data.frame(value = feat_t_mirgene[feature, ], class = mir_well_mirgene[, 1])
  boxplot_obj <- boxplot(value ~ class, data = plot_data, main = paste("Boxplot for", feature), xlab = "Class", ylab = "Feature Value")
  boxplot_list_mirgene[[feature]] <- boxplot_obj
}
dev.off()


#################  KS test 
ks_test_results <- list()
for (feature in rownames(feat_t_mirgene)) {
  feature_data <- feat_t_mirgene[feature, ] # features
  class_data <- mir_well_mirgene[, 1] # class
  # Perform the KS test
  ks_result <- ks.test(feature_data[class_data == "Resilient"], feature_data[class_data == "Spurious"])
  ks_test_results[[feature]] <- ks_result
}
# Save results 
result_df <- data.frame(
  Feature = names(ks_test_results),
  KS_statistic = sapply(ks_test_results, function(x) x$statistic),
  p_value = sapply(ks_test_results, function(x) x$p.value)
)



#########################################################################     SNVs     #############################################################################

################################### MIRBASE

#Import the table
new_final_TABLE = read.table("var_pot_table.tsv", sep="\t", header = F)
colnames(new_final_TABLE) = c("mirna_name", "mirna_id", "status", "snp_pos", "type")
new_final_TABLE$snp_pos=as.factor(as.numeric(new_final_TABLE$snp_pos))

#LOADING POTENTIAL SNPs
POT_neutral <- table(new_final_TABLE[new_final_TABLE$status == "neutral" & new_final_TABLE$type == "P", "snp_pos"])
POT_deactivating = table(new_final_TABLE[ new_final_TABLE$status=="deactivated" & new_final_TABLE$type=="P" ,"snp_pos"])
POT_noImpact = table(new_final_TABLE[new_final_TABLE$status == "noImpact" & new_final_TABLE$type == "P", "snp_pos"])
POT_activating = table(new_final_TABLE[new_final_TABLE$status == "activated" & new_final_TABLE$type == "P", "snp_pos"])

#LOADING GENOMIC VARIANTS 
VAR_neutral <- table(new_final_TABLE[new_final_TABLE$status == "neutral" & new_final_TABLE$type == "V", "snp_pos"])
VAR_deactivating = table(new_final_TABLE[ new_final_TABLE$status=="deactivated" & new_final_TABLE$type=="V" ,"snp_pos"])
VAR_noImpact = table(new_final_TABLE[new_final_TABLE$status == "noImpact" & new_final_TABLE$type == "V", "snp_pos"])
VAR_activating = table(new_final_TABLE[new_final_TABLE$status == "activated" & new_final_TABLE$type == "V", "snp_pos"])

#PLOTTING 
a = VAR_neutral/POT_neutral
d = VAR_deactivating/POT_deactivating
pdf("new_boxplot.pdf")
boxplot(a, d, horizontal = TRUE, outline = FALSE, col=c("lightslateblue","yellow3"), main="Boxplots of ratios between observed over possible SNVs in pre-miRNAs", names=c("a", "d"), ylim =c(0, 0.1), cex.main=1) 
wilcox.test(VAR_neutral/POT_neutral, VAR_deactivating/POT_deactivating)
dev.off()

#PLOTTING POTENTIAL SNPs
# Plot 1
pdf("biasfreq.pdf")
plot(POT_deactivating/POT_neutral, xlim=c(-40,40), ylim=c(0,0.3), main="RATIO - possible deactivating SNPs over possible SNPs")
dev.off()
# Plot 2
pdf("biastot.pdf")
plot(POT_neutral, type="h", xlim=c(-40,40), main = "OVERLAY all possible SNPs - possible deactivating SNPs")
lines(POT_deactivating, type="h", col="red", xlim=c(-30,30))
dev.off()

#PLOTTING VARIANT SNPs
plot(VAR_deactivating/VAR_neutral,xlim=c(-35,35),ylim=c(0,0.25), main = "RATIO - observed deactivating SNPs over observed SNPs") 
plot(VAR_neutral,type="h",xlim=c(-50,50), main = "OVERLAY all observed SNPs - deactivating SNPs")  
lines(VAR_deactivating,type="h",col="#1b9e77",xlim=c(-30,30))




################################# MIRGENE

mirgene_names = read.csv("mirgene_mrna_names.txt", header=F)
# Extract miRNA names as a vector
mirna_names_vector <- mirgene_names$V1
# Filter rows based on miRNA names
mirgene_data <- new_final_TABLE[new_final_TABLE$mirna_name %in% mirna_names_vector, ]

# LOADING POTENTIAL SNPs
POT_neutral_mirgene <- table(mirgene_data[mirgene_data$status == "neutral" & mirgene_data$type == "P", "snp_pos"])
POT_deactivating_mirgene = table(mirgene_data[mirgene_data$status=="deactivated" & mirgene_data$type=="P" ,"snp_pos"])
POT_noImpact_mirgene = table(mirgene_data[mirgene_data$status == "noImpact" & mirgene_data$type == "P", "snp_pos"])
POT_activating_mirgene = table(mirgene_data[mirgene_data$status == "activated" & mirgene_data$type == "P", "snp_pos"])

#LOADING GENOMIC VARIANTS 
VAR_neutral_mirgene <- table(mirgene_data[mirgene_data$status == "neutral" & mirgene_data$type == "V", "snp_pos"])
VAR_deactivating_mirgene = table(mirgene_data[mirgene_data$status=="deactivated" & mirgene_data$type=="V" ,"snp_pos"])
VAR_noImpact_mirgene = table(mirgene_data[mirgene_data$status == "noImpact" & mirgene_data$type == "V", "snp_pos"])
VAR_activating_mirgene = table(mirgene_data[mirgene_data$status == "activated" & mirgene_data$type == "V", "snp_pos"])

#PLOTTING 
a_mirgene = VAR_neutral_mirgene/POT_neutral_mirgene
d_mirgene = VAR_deactivating_mirgene/POT_deactivating_mirgene
c = a_mirgene-d_mirgene
pdf("boxplot_mirgene.pdf")
boxplot(a_mirgene, c, horizontal = TRUE, outline = FALSE, col=c("lightslateblue","yellow3"), main="Boxplots of ratios observed/possible SNVs in pre-miRNAs", names=c("all SNVs", "deactivating SNVs"), ylim =c(0, 0.12), cex.main=1) 
wilcox.test(a_mirgene, c) #wilcox.test(a_mirgene, VAR_deactivating_mirgene/POT_deactivating_mirgene)
dev.off()

#PLOTTING POTENTIAL SNPs
pdf("biasfreq_mirgene.pdf")
plot(POT_deactivating_mirgene/POT_neutral_mirgene,xlim=c(-40,40),ylim=c(0,0.3), main="RATIO - possible deactivating SNPs over possible SNPs MIRGENE")
dev.off()
pdf("biaspot_mirgene.pdf")
plot(POT_neutral_mirgene,type="h",xlim=c(-40,40), main = "OVERLAY all possible SNPs - possible deactivating SNPs MIRGENE")
lines(POT_deactivating_mirgene,type="h",col="red",xlim=c(-30,30))
dev.off()

#PLOTTING VARIANT SNPs
plot(VAR_deactivating_mirgene/VAR_neutral_mirgene,xlim=c(-35,35),ylim=c(0,0.25), main = "RATIO - observed deactivating SNPs over observed SNPs MIRGENE") 
plot(VAR_neutral_mirgene,type="h",xlim=c(-50,50), main = "OVERLAY all observed SNPs - deactivating SNPs MIRGENE")  
lines(VAR_deactivating_mirgene,type="h",col="#1b9e77",xlim=c(-30,30))



#########################################################   FAMILIES  ###################################################################

############################### MIRGENE

families_df = read.csv("family_classes_mirgene.txt", sep="\t")
colnames(families_df) = c("class", "mirna", "family")
num_unique_families <- length(unique(families_df$family))  # 262 families
# Count how many miRNAs there are in each family
library(dplyr)
family_counts <- families_df %>%
  group_by(family) %>%
  summarize(count = n())
family_counts = as.data.frame(family_counts)
sorted_family_counts <- family_counts %>%
  arrange(desc(count))
sorted_family_counts[sorted_family_counts$count==1,]
# Classify them 
family_class_counts <- families_df %>%
  group_by(family, class) %>%
  summarize(count = n())

family_info = merge(sorted_family_counts, family_class_counts, by="family")
family_info$class <- trimws(family_info$class, "left")
single_D = family_info[family_info$class=="Dispensable" & family_info$count.x=='1',] # 109 (35%)
single_R = family_info[family_info$class=="Resilient" & family_info$count.x=='1',] # 65 (41%)
single_I = family_info[family_info$class=="Inducible" & family_info$count.x=='1',] # 19 (83%)
single_S = family_info[family_info$class=="Spurious" & family_info$count.x=='1',] # 8 (73%)


#########################################################    CLUSTERS    ##################################################################

############################## MIRBASE 

# BOXPLOT
data = read.table("complete_mirna_classes_distances.tsv", sep="\t", header=F)
colnames(data) <- c("chr", "start", "end", "strand", "mirna_id", "mirna_name", "distance", "status")
pdf("boxplot_distances_mirbase.pdf")
boxplot(data$distance~data$status,horizontal=TRUE,outline=F)
dev.off()

# VIOLINPLOT
#install.packages("vioplot")
library(vioplot)
pdf("violinplot_distances_mirbase.pdf")
vioplot(data$distance~data$status,horizontal=TRUE,outline=F)
dev.off()

# DENSITY PLOTS
pdf("density_D.pdf")
plot(density(data[data$status=="Dispensable", "distance"]))
dev.off()
pdf("density_I.pdf")
plot(density(data[data$status=="Inducible", "distance"]))
dev.off()
pdf("density_R.pdf")
plot(density(data[data$status=="Resilient", "distance"]))
dev.off()
pdf("density_S.pdf")
plot(density(data[data$status=="Spurious", "distance"]))
dev.off()

# TABLES
table(data[data$status=="Dispensable", "distance"]<=500)
table(data[data$status=="Inducible", "distance"]<=500)
table(data[data$status=="Resilient", "distance"]<=500)
table(data[data$status=="Spurious", "distance"]<=500)

table(data[data$status=="Resilient", "chr"])
table(data[data$status=="Spurious", "chr"])
data[data$status=="Spurious" & data$chr=="chr21", ]

# WILCOXON TEST
inducible_data <- data[data$status == "Inducible", ]
resilient_data <- data[data$status == "Resilient", ]
spurious_data <- data[data$status == "Spurious", ]
dispensable_data <- data[data$status == "Dispensable", ]

wilcox.test(spurious_data$distance, resilient_data$distance)
wilcox.test(spurious_data$distance, dispensable_data$distance)
wilcox.test(spurious_data$distance, inducible_data$distance)
wilcox.test(resilient_data$distance, dispensable_data$distance)
wilcox.test(resilient_data$distance, inducible_data$distance)
wilcox.test(inducible_data$distance, dispensable_data$distance)

# CLUSTERS ANALYSIS
clustered_spurious <- as.numeric(rownames(data[data$status == "Spurious" & data$distance <= 500, ]))
count_spurious_clustered = length(clustered_spurious)   # 10
mirna_names_clustered_spurious <- data$mirna_name[clustered_spurious]

clustered_inducible <- as.numeric(rownames(data[data$status == "Inducible" & data$distance <= 500, ]))
count_inducible_clustered = length(clustered_inducible)   # 16
mirna_names_clustered_inducible <- data$mirna_name[clustered_inducible]

clustered_dispensable <- as.numeric(rownames(data[data$status == "Dispensable" & data$distance <= 500, ]))
count_dispensable_clustered = length(clustered_dispensable)   # 95
mirna_names_clustered_dispensable <- data$mirna_name[clustered_dispensable]

clustered_resilient <- as.numeric(rownames(data[data$status == "Resilient" & data$distance <= 500, ]))
count_resilient_clustered = length(clustered_resilient)   # 33
mirna_names_clustered_resilient <- data$mirna_name[clustered_resilient]

clusters = as.numeric(rownames(data[data$distance <= 500,]))
mirna_names_clusters = data$mirna_name[clusters]
result_all_clusters <- paste(mirna_names_clusters, ",", data$status[clusters], ",", data$distance[clusters])
# write.table(result_all_clusters, "result_all_clusters.txt") 

# ADDING COLUMNS 
library(dplyr)
data <- data %>%
  mutate(Cluster = ifelse(distance <= 500, "C", "N"),
         cPos = ifelse(ave(Cluster == "C", cumsum(c(0, diff(Cluster == "N") == 1)), FUN = cumsum) == 0, "N", 
                       ave(Cluster == "C", cumsum(c(0, diff(Cluster == "N") == 1)), FUN = cumsum)))
# to ex
write.table(data, "cluster_data_to_process.csv", row.names = F, sep=";")

# After ex
mirbase_cluster = read.csv("cluster_data_to_process_OUTPUT.csv", sep=";")
mirbase_cluster$groups <- paste0(substr(mirbase_cluster$prev_mirna, 1, 1), "-", substr(mirbase_cluster$status, 1, 1), "-", substr(mirbase_cluster$succ_mirna, 1, 1))

# ANALYSIS
subset_data_cluster_mirbase <- mirbase_cluster[mirbase_cluster$Cluster == "C", ]
table(subset_data_cluster_mirbase$groups)
table(subset_data_cluster_mirbase$cPos)
table(subset_data_cluster_mirbase$cPos, subset_data_cluster_mirbase$status)
table(subset_data_cluster_mirbase$chr, subset_data_cluster_mirbase$status)

table(subset_data_cluster_mirbase$distance, subset_data_cluster_mirbase$status)
boxplot(table(subset_data_cluster_mirbase$distance, subset_data_cluster_mirbase$status=="Dispensable"))
boxplot(table(subset_data_cluster_mirbase$distance, subset_data_cluster_mirbase$status=="Inducible"))
boxplot(table(subset_data_cluster_mirbase$distance, subset_data_cluster_mirbase$status=="Resilient"))
boxplot(table(subset_data_cluster_mirbase$distance, subset_data_cluster_mirbase$status=="Spurious"))

result_table_mirbase <- table(subset_data_cluster_mirbase$distance, subset_data_cluster_mirbase$status)
result_df_mirbase <- as.data.frame(result_table_mirbase)

pdf("plots_mirbase_clusters.pdf", width = 10, height = 10)
par(mfrow = c(4, 1), mar = c(4, 4, 2, 1))  # 4 rows, 1 column
for (class in unique(subset_data_cluster_mirbase$status)) {
  subset_class_data_mirbase <- subset_data_cluster_mirbase[subset_data_cluster_mirbase$status == class, ]
  boxplot(subset_class_data_mirbase$distance, main = class, xlab = "Distance", ylab = "Count", col = "lightgrey", horizontal = TRUE)
}
dev.off()



############################## MIRGENE

mirgene_dist = read.csv("mirgene_class_distances.csv", sep="\t", header=F)
colnames(mirgene_dist) = c("chr", "start", "end", "strand", "mirna_name", "bo", "dist", "class")
mirgene_dist = mirgene_dist[,c(1:5, 7:8)]
pdf("boxplot_distances_mirgene.pdf")
boxplot(mirgene_dist$dist~mirgene_dist$class,horizontal=TRUE,outline=F)
dev.off()

mirgene_dist$class <- trimws(mirgene_dist$class, "left")

clustered_spurious_mirgene <- as.numeric(rownames(mirgene_dist[mirgene_dist$class == "Spurious" & mirgene_dist$dist <= 500, ]))
count_spurious_clustered_mirgene = length(clustered_spurious_mirgene)   # 0

clustered_inducible_mirgene <- as.numeric(rownames(mirgene_dist[mirgene_dist$class == "Inducible" & mirgene_dist$dist <= 500, ]))
count_inducible_clustered_mirgene = length(clustered_inducible_mirgene)   # 2/22 (9%)
mirna_names_clustered_inducible_mirgene <- mirgene_dist$mirna_name[clustered_inducible_mirgene]

clustered_dispensable_mirgene <- as.numeric(rownames(mirgene_dist[mirgene_dist$class == "Dispensable" & mirgene_dist$dist <= 500, ]))
count_dispensable_clustered_mirgene = length(clustered_dispensable_mirgene)   # 76/308 (24.68%)
mirna_names_clustered_dispensable_mirgene <- mirgene_dist$mirna_name[clustered_dispensable_mirgene]

clustered_resilient_mirgene <- as.numeric(rownames(mirgene_dist[mirgene_dist$class == "Resilient" & mirgene_dist$dist <= 500, ]))
count_resilient_clustered_mirgene = length(clustered_resilient_mirgene)   # 30/155 (19.35%)
mirna_names_clustered_resilient_mirgene <- mirgene_dist$mirna_name[clustered_resilient_mirgene]

clusters_mirgene = as.numeric(rownames(mirgene_dist[mirgene_dist$dist <= 500,]))
mirna_names_clusters_mirgene = mirgene_dist$mirna_name[clusters_mirgene]
result_all_clusters_mirgene <- paste(mirna_names_clusters_mirgene, ",", mirgene_dist$class[clusters_mirgene], ",", mirgene_dist$dist[clusters_mirgene])
#write.table(result_all_clusters_mirgene, "result_all_clusters_mirgene.txt") 

# ADDING COLUMNS 
library(dplyr)
mirgene_dist <- mirgene_dist %>%
  mutate(Cluster = ifelse(dist <= 500, "C", "N"),
         cPos = ifelse(ave(Cluster == "C", cumsum(c(0, diff(Cluster == "N") == 1)), FUN = cumsum) == 0, "N", 
                       ave(Cluster == "C", cumsum(c(0, diff(Cluster == "N") == 1)), FUN = cumsum)))
# to excel
write.table(mirgene_dist, "cluster_data_to_process_mirgene.csv", row.names = F, sep=";")

# After excel
mirgene_cluster = read.csv("cluster_data_PROCESSED_mirgene.csv", sep=";")
mirgene_cluster$groups <- paste0(substr(mirbase_cluster$prev_mirna, 1, 1), "-", substr(mirbase_cluster$class, 1, 1), "-", substr(mirbase_cluster$succ_mirna, 1, 1))

subset_data_cluster_mirgene <- mirgene_cluster[mirgene_cluster$Cluster == "C", ]
table(subset_data_cluster_mirgene$groups)
table(subset_data_cluster_mirgene$cPos)
table(subset_data_cluster_mirgene$cPos, subset_data_cluster_mirgene$class)
table(subset_data_cluster_mirgene$chr, subset_data_cluster_mirgene$class)

table(subset_data_cluster_mirgene$distance, subset_data_cluster_mirgene$class)
boxplot(table(subset_data_cluster_mirgene$dist, subset_data_cluster_mirgene$class=="Dispensable"))
boxplot(table(subset_data_cluster_mirgene$dist, subset_data_cluster_mirgene$class=="Inducible"))
boxplot(table(subset_data_cluster_mirgene$dist, subset_data_cluster_mirgene$class=="Resilient"))
boxplot(table(subset_data_cluster_mirgene$dist, subset_data_cluster_mirgene$class=="Spurious"))

result_table_mirgene <- table(subset_data_cluster_mirgene$dist, subset_data_cluster_mirgene$class)
result_df_mirgene <- as.data.frame(result_table_mirgene)

pdf("plots_mirgene_clusters.pdf", width = 10, height = 10)
par(mfrow = c(4, 1), mar = c(4, 4, 2, 1))  # 4 rows, 1 column
for (class in unique(subset_data_cluster_mirgene$class)) {
  subset_class_data_mirgene <- subset_data_cluster_mirgene[subset_data_cluster_mirgene$class == class, ]
  boxplot(subset_class_data_mirgene$dist, main = class, xlab = "Distance", ylab = "Count", col = "lightgrey", horizontal = TRUE)
}
dev.off()


##############################################################  REPEATS  ########################################################

################################### MIRBASE

repeats_data = read.csv("repeats_data.csv", sep="\t", header=T)
colnames(repeats_data) <- c("chr", "start", "end", "strand_mirna", "mirna_id", "mirna_name", "distance", "class", "chr_rep", "repeat_start", "repeat_end", "repeat_name", "repeat_len", "rep_strand" ,"rep_distance")
repeats_data = repeats_data[,c(1:7,9:15)] # remove the old class column
repeats_subset_data <- repeats_data[repeats_data$rep_distance == 0, ]
class_ok = read.table("class_ok.tsv", sep="\t")
#class_ok = data[,c(6:6,8:8)]
# write.table(class_ok, "class_ok.tsv", sep="\t")
ok_repeats = merge(repeats_subset_data, class_ok, by="mirna_name", all.x = T)

library(dplyr)
library(ggplot2)
ok_repeats <- ok_repeats %>%
  mutate(rep_class = case_when(
    grepl("FRAM|Alu|FLAM", repeat_name) ~ "Alu",
    grepl("[()]|rich|REP|Rep|SATR", repeat_name) ~ "SSR",
    grepl("MIR", repeat_name) ~ "MIR",
    grepl("MADE", repeat_name) ~ "MADE",
    grepl("RTE", repeat_name) ~ "RTE",
    grepl("MER", repeat_name) ~ "MER",
    grepl("LTR|MLT|HERV|RTE", repeat_name) ~ "LTR",
    grepl("MST", repeat_name) ~ "MST",
    grepl("HUERS", repeat_name) ~ "HUERS",
    grepl("HAL", repeat_name) ~ "HAL",
    grepl("Tigger", repeat_name) ~ "Tigger",
    grepl("SINE", repeat_name) ~ "SINE",
    grepl("^L1|L2|L3|LINE", repeat_name) ~ "L",
    grepl("Charlie", repeat_name) ~ "Charlie",
    TRUE ~ "Others" ))
proportions_data_mirbase <- ok_repeats %>%
  group_by(status, rep_class) %>%
  summarize(count = n()) %>%
  group_by(status) %>%
  mutate(proportion = count / sum(count))
pdf("repeats_class.pdf")
bar_plot_repeats_class_mirbase <- ggplot(proportions_data_mirbase, aes(x = rep_class, y = proportion, fill = status)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  labs(title = "Distribution of Repeat classes by miRNA Class MIRBASE", x = "Repeat Types", y = "Proportion") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=8))
facet_grid(~ rep_class)
bar_plot_repeats_class_mirbase
dev.off()


# library(ggplot2)
# bar_plot_repeats_family_mirbase = ggplot(ok_repeats, aes(x = rep_class, fill = status)) +
#   geom_bar(position = "dodge", color = "black", show.legend = TRUE) +
#   labs(title = "Repeat families by miRNA Class MIRBASE", x = "Repeat Types", y = "Count") +
#   theme_minimal()
# ggsave("repeats_type_plot_MIRBASE.pdf", bar_plot_repeats_family_mirbase, width = 10, height = 6)
# bar_plot_repeats_family_mirbase
# dev.off()


################################### MIRGENE

repeats_mirgene = merge(repeats_subset_data, mirgene_classes, by="mirna_name")
repeats_mirgene <- repeats_mirgene %>%
  mutate(rep_class = case_when(
    grepl("FRAM|Alu|FLAM", repeat_name) ~ "Alu",
    grepl("[()]|rich|REP|Rep|SATR", repeat_name) ~ "SSR",
    grepl("MIR", repeat_name) ~ "MIR",
    grepl("MADE", repeat_name) ~ "MADE",
    grepl("RTE", repeat_name) ~ "RTE",
    grepl("MER", repeat_name) ~ "MER",
    grepl("LTR|MLT|HERV|RTE", repeat_name) ~ "LTR",
    grepl("MST", repeat_name) ~ "MST",
    grepl("HUERS", repeat_name) ~ "HUERS",
    grepl("HAL", repeat_name) ~ "HAL",
    grepl("Tigger", repeat_name) ~ "Tigger",
    grepl("SINE", repeat_name) ~ "SINE",
    grepl("^L1|L2|L3|LINE", repeat_name) ~ "L",
    grepl("Charlie", repeat_name) ~ "Charlie",
    TRUE ~ "Others" ))
proportions_data_mirgene <- repeats_mirgene %>%
  group_by(status, rep_class) %>%
  summarize(count = n()) %>%
  group_by(status) %>%
  mutate(proportion = count / sum(count))
pdf("repeats_class_MIRGENE.pdf")
bar_plot_repeats_class_mirgene <- ggplot(proportions_data_mirgene, aes(x = rep_class, y = proportion, fill = status)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  labs(title = "Distribution of Repeat classes by miRNA Class MIRGENE", x = "Repeat Types", y = "Proportion") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=8))
facet_grid(~ rep_class)
bar_plot_repeats_class_mirgene
dev.off()


#####################################################################     REPEATS SPECIES     ###################################################################

######################################## MIRBASE

# Mouse classes:
#Dispensable: 557
#Inducible: 342
#Resilient: 146
#Spurious: 189

# Macaca classes:
#Dispensable: 323
#Inducible: 79
#Resilient: 157
#Spurious: 58

# mouse
#  229/1235 = 19% mirbase ; 30/401 = 7%  mirgene
# human
#  487/1859 = 26% mirbase ; 80/496 = 16%  mirgene 
# macaca
# 300/618 = 48% mirbase ; 199/403 = 49%  mirgene


############# MOUSE and MACACA

# Mouse
repeats_mouse = read.csv("repeat_class_mouse_mirbase.csv", sep="\t", check.names = F)
repeats_mouse = repeats_mouse[repeats_mouse$rep_dist == 0, ]
repeats_mouse = na.omit(repeats_mouse)
repeats_mouse = repeats_mouse[,c(1:12)]
class_mouse = read.csv("mirbase_class_topo.tsv", sep="\t", header = F)
colnames(class_mouse) = c("miRNA name", "class")
complete_repeats_mouse = merge(repeats_mouse, class_mouse, by="miRNA name")
complete_repeats_mouse$class <- trimws(complete_repeats_mouse$class, "left")

complete_repeats_mouse <- complete_repeats_mouse %>%
  mutate(rep_class_topo = case_when(
    grepl("FRAM|Alu|FLAM", rep_name) ~ "Alu",
    grepl("[()]|rich|REP|Rep|SATR", rep_name) ~ "SSR",
    grepl("MIR", rep_name) ~ "MIR",
    grepl("MADE", rep_name) ~ "MADE",
    grepl("RTE", rep_name) ~ "RTE",
    grepl("MER", rep_name) ~ "MER",
    grepl("LTR|MLT|HERV|RTE", rep_name) ~ "LTR",
    grepl("MST", rep_name) ~ "MST",
    grepl("HUERS", rep_name) ~ "HUERS",
    grepl("HAL", rep_name) ~ "HAL",
    grepl("Tigger", rep_name) ~ "Tigger",
    grepl("SINE|B3|B3A|B4A|B2|B4|B1|tRNA", rep_name) ~ "SINE",
    grepl("^L1|L2|L3|LINE", rep_name) ~ "L",
    grepl("Charlie", rep_name) ~ "Charlie",
    TRUE ~ "Others" ))
# barplot_repeats_topo_mirbase = ggplot(complete_repeats_mouse, aes(x = rep_class_topo, fill = class)) +
#   geom_bar(position = "dodge", color = "black", show.legend = TRUE) +
#   labs(title = "Repeat type by miRNA Class MIRBASE TOPO", x = "Repeat Types", y = "Count") +
#   theme_minimal()+
#   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=8))
# ggsave("barplot_repeats_topo_mirbase.pdf", barplot_repeats_topo_mirbase, width = 10, height = 6)

# Proportions
proportions_topo <- complete_repeats_mouse %>%
  group_by(class, rep_class_topo) %>%
  summarise(count = n()) %>%
  group_by(class) %>%
  mutate(proportion = count / sum(count))
proportions_topo_repeats_barplot = ggplot(proportions_topo, aes(x = rep_class_topo, y = proportion, fill = class)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  labs(title = "Distribution of Repeat classes by miRNA Class MIRBASE MOUSE", x = "Repeat Types", y = "Proportion") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=8)) 
facet_grid(~ rep_class_topo)
ggsave("barplot_repeats_MOUSE_proportions_MIRBASE.pdf", proportions_topo_repeats_barplot, width = 10, height = 6)
dev.off()



# Macaca
repeats_macaca = read.csv("repeat_class_macaca_mirbase.csv", sep="\t", check.names = F)
repeats_macaca = repeats_macaca[repeats_macaca$rep_dist == 0, ]
repeats_macaca = na.omit(repeats_macaca)
repeats_macaca = repeats_macaca[,c(1:12)]
class_macaca = read.csv("mirbase_class_macaca.tsv", sep="\t", header = F)
colnames(class_macaca) = c("miRNA name", "class")
complete_repeats_macaca = merge(repeats_macaca, class_macaca, by="miRNA name")

complete_repeats_macaca <- complete_repeats_macaca %>%
  mutate(rep_class_macaca = case_when(
    grepl("FRAM|Alu|FLAM", rep_name) ~ "Alu",
    grepl("[()]|rich|REP|Rep|SATR", rep_name) ~ "SSR",
    grepl("MIR", rep_name) ~ "MIR",
    grepl("MADE", rep_name) ~ "MADE",
    grepl("RTE", rep_name) ~ "RTE",
    grepl("MER", rep_name) ~ "MER",
    grepl("LTR|MLT|HERV|RTE", rep_name) ~ "LTR",
    grepl("MST", rep_name) ~ "MST",
    grepl("HUERS", rep_name) ~ "HUERS",
    grepl("HAL", rep_name) ~ "HAL",
    grepl("Tigger", rep_name) ~ "Tigger",
    grepl("SINE", rep_name) ~ "SINE",
    grepl("^L1|L2|L3|LINE", rep_name) ~ "L",
    grepl("Charlie", rep_name) ~ "Charlie",
    TRUE ~ "Others" ))
# barplot_repeats_macaca_mirbase = ggplot(complete_repeats_macaca, aes(x = rep_class_macaca, fill = class)) +
#   geom_bar(position = "dodge", color = "black", show.legend = TRUE) +
#   labs(title = "Repeat type by miRNA Class MIRBASE MACACA", x = "Repeat Types", y = "Count") +
#   theme_minimal()+
#   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=8))
# ggsave("barplot_repeats_macaca_mirbase.pdf", barplot_repeats_macaca_mirbase, width = 10, height = 6)

# Proportions 
proportions_rhesus <- complete_repeats_macaca %>%
  group_by(class, rep_class_macaca) %>%
  summarise(count = n()) %>%
  group_by(class) %>%
  mutate(proportion = count / sum(count))
proportions_rhesus_repeats_barplot = ggplot(proportions_rhesus, aes(x = rep_class_macaca, y = proportion, fill = class)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  labs(title = "Distribution of Repeat classes by miRNA Class MIRBASE RHESUS", x = "Repeat Types", y = "Proportion") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=8)) 
facet_grid(~ rep_class_macaca)
ggsave("barplot_repeats_RHESUS_proportions_MIRBASE.pdf", proportions_rhesus_repeats_barplot, width = 10, height = 6)
dev.off()


###### COMPARATIVE REPEATS ANALYSIS HUMAN - TOPO - MACACA    .............. MIRBASE .............

repeats_comp_human <- ok_repeats %>%
  mutate(comparative_rep = case_when(
    grepl("MIR|MER|SINE|FRAM|FLAM|tRNA", repeat_name) ~ "SINE",
    grepl("Alu", repeat_name) ~ "Alu",
    grepl("[()]|rich|REP", repeat_name) ~ "Simple repeat",
    grepl("^L|LINE|HAL|Charli", repeat_name) ~ "LINE",
    grepl("MADE|Tigger", repeat_name) ~ "DNA transposon",
    grepl("LTR", repeat_name) ~ "LTR",
    grepl("MLT|RTE|MST|HUERS|MTE|ORR1D1|RCHARR1|ORR1A3|ORR1E", repeat_name) ~ "RNA transposon",
    TRUE ~ "Others" ))

repeats_comp_mml <- complete_repeats_macaca %>%
  mutate(comparative_rep = case_when(
    grepl("MIR|MER|SINE|FRAM|FLAM|tRNA", rep_name) ~ "SINE",
    grepl("Alu", rep_name) ~ "Alu",
    grepl("[()]|rich|REP", rep_name) ~ "Simple repeat",
    grepl("^L|LINE|HAL|Plat_L3|Charlie17a|THE1B", rep_name) ~ "LINE",
    grepl("MADE|Tigger|X5a_DNA", rep_name) ~ "DNA transposon",
    grepl("LTR", rep_name) ~ "LTR",
    grepl("MLT|RTE|MST|HUERS|MTE|ORR1D1|RCHARR1|ORR1A3|ORR1E", rep_name) ~ "RNA transposon",
    TRUE ~ "Others" ))

repeats_comp_topo <- complete_repeats_mouse %>%
  mutate(comparative_rep = case_when(
    grepl("MIR|MER|SINE|FRAM|FLAM|B3|B3A|B4A|SINE|MIR|B2|B4|B1|tRNA", rep_name) ~ "SINE",
    grepl("Alu", rep_name) ~ "Alu",
    grepl("[()]|rich|REP", rep_name) ~ "Simple repeat",
    grepl("^L|LINE|HAL", rep_name) ~ "LINE",
    grepl("MADE|Tigger", rep_name) ~ "DNA transposon",
    grepl("LTR", rep_name) ~ "LTR",
    grepl("MLT|RTE|MST|HUERS|MTE|ORR1D1|RCHARR1|ORR1A3|ORR1E", rep_name) ~ "RNA transposon",
    TRUE ~ "Others"))

# HUMAN
human_comp_for_merging = repeats_comp_human[,c(2,1,15,11,17)]
human_comp_for_merging <- cbind(human_comp_for_merging, new_col = "HUMAN")
human_comp_for_merging <- human_comp_for_merging %>%
  mutate(status = str_to_title(status))
sorted_human_comp <- human_comp_for_merging[order(human_comp_for_merging$chr), ]

# MOUSE
topo_comp_for_merging = repeats_comp_topo[,c(2,1,13,9,15)]
topo_comp_for_merging <- cbind(topo_comp_for_merging, new_col = "MOUSE")
topo_comp_for_merging <- topo_comp_for_merging %>%
  rename(#rep_class = rep_class_topo,
    mirna_name = "miRNA name",
    repeat_name = rep_name,
    status = "class")
library(dplyr)
library(stringr)
topo_comp_for_merging <- topo_comp_for_merging %>%
  mutate(status = str_to_title(status))
sorted_mouse_comp <- topo_comp_for_merging[order(topo_comp_for_merging$chr), ]

# MACACA
macaca_comp_for_merging = repeats_comp_mml[, c(2,1,13,9,15)]
macaca_comp_for_merging <- cbind(macaca_comp_for_merging, new_col = "RHESUS")
macaca_comp_for_merging <- macaca_comp_for_merging %>%
  rename(#rep_class = rep_class_mml,
    mirna_name = "miRNA name",
    repeat_name = rep_name,
    status = "class")
macaca_comp_for_merging <- macaca_comp_for_merging %>%
  mutate(status = str_to_title(status))
sorted_macaca_comp <- macaca_comp_for_merging[order(macaca_comp_for_merging$chr), ]


# MERGE AND PLOT
complete_comparison_rep = rbind(sorted_human_comp, sorted_macaca_comp, sorted_mouse_comp)
complete_comparison_rep$status <- trimws(complete_comparison_rep$status, "left")

# library(ggplot2)
# ggplot(complete_comparison_rep, aes(x = comparative_rep, fill = new_col)) +
#   geom_bar(position = "dodge", stat = "count") +
#   labs(x = "Repeat type", y = "Count", title = "Distribution of miRNAs in Repeat types MIRBASE") +
#   scale_fill_manual(values = c("HUMAN" = "red", "MOUSE" = "green", "RHESUS"="blue")) + 
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 8)) +
#   facet_grid(~ status)
# dev.off()

# Calculate proportions for each class
proportions_data <- complete_comparison_rep %>%
  group_by(status, comparative_rep, new_col) %>% #rep_class
  summarise(count = n()) %>%
  group_by(status, comparative_rep) %>%
  mutate(proportion = count / sum(count))
COMPARATIVE_ANALYSIS_MIRBASE <- ggplot(proportions_data, aes(x = comparative_rep, y = proportion, fill = new_col)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Repeat type", y = "Proportion", title = "Distribution of miRNAs in Repeat types MIRBASE") +
  scale_fill_manual(values = c("HUMAN" = "red", "MOUSE" = "green", "RHESUS" = "blue")) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 8)) +
  facet_grid(~ status)
ggsave("COMPARATIVE_REPEATS_ANALYSIS_MIRBASE.pdf", COMPARATIVE_ANALYSIS_MIRBASE, width = 10, height = 6)
dev.off()


######################### MIRGENE

# mouse
names_mouse_mirgene = read.csv("mouse_mirgene.txt", sep="\t", header = F)
colnames(names_mouse_mirgene) = c("miRNA name")
complete_repeats_mouse_mirgene = merge(complete_repeats_mouse, names_mouse_mirgene, by="miRNA name")
complete_repeats_mouse_mirgene$class <- trimws(complete_repeats_mouse_mirgene$class, "left")
complete_repeats_mouse_mirgene <- complete_repeats_mouse_mirgene %>%
  mutate(rep_class_topo = case_when(
    grepl("FRAM|Alu|FLAM", rep_name) ~ "Alu",
    grepl("[()]|rich|REP|Rep|SATR", rep_name) ~ "SSR",
    grepl("MIR", rep_name) ~ "MIR",
    grepl("MADE", rep_name) ~ "MADE",
    grepl("RTE", rep_name) ~ "RTE",
    grepl("MER", rep_name) ~ "MER",
    grepl("LTR|MLT|HERV|RTE", rep_name) ~ "LTR",
    grepl("MST", rep_name) ~ "MST",
    grepl("HUERS", rep_name) ~ "HUERS",
    grepl("HAL", rep_name) ~ "HAL",
    grepl("Tigger", rep_name) ~ "Tigger",
    grepl("SINE|B3|B3A|B4A|B2|B4|B1|tRNA", rep_name) ~ "SINE",
    grepl("^L1|L2|L3|LINE", rep_name) ~ "L",
    grepl("Charlie", rep_name) ~ "Charlie",
    TRUE ~ "Others" ))
proportions_topo_mirgene <- complete_repeats_mouse_mirgene %>%
  group_by(class, rep_class_topo) %>%
  summarise(count = n()) %>%
  group_by(class) %>%
  mutate(proportion = count / sum(count))
proportions_topo_repeats_barplot_mirgene = ggplot(proportions_topo_mirgene, aes(x = rep_class_topo, y = proportion, fill = class)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  labs(title = "Distribution of Repeat classes by miRNA Class MIRBASE MOUSE", x = "Repeat Types", y = "Proportion") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=8)) 
facet_grid(~ rep_class_topo)
ggsave("barplot_repeats_MOUSE_proportions_MIRGENE.pdf", proportions_topo_repeats_barplot_mirgene, width = 10, height = 6)
dev.off()

# macaca
names_macaca_mirgene = read.csv("col_names_mml_mirgene.txt", sep="\t", header = F)
colnames(names_macaca_mirgene) = c("miRNA name")
complete_repeats_macaca_mirgene = merge(complete_repeats_macaca, names_macaca_mirgene, by="miRNA name")
complete_repeats_macaca_mirgene$class <- trimws(complete_repeats_macaca_mirgene$class, "left")
complete_repeats_macaca_mirgene <- complete_repeats_macaca_mirgene %>%
  mutate(rep_class_macaca = case_when(
    grepl("FRAM|Alu|FLAM", rep_name) ~ "Alu",
    grepl("[()]|rich|REP|Rep|SATR", rep_name) ~ "SSR",
    grepl("MIR", rep_name) ~ "MIR",
    grepl("MADE", rep_name) ~ "MADE",
    grepl("RTE", rep_name) ~ "RTE",
    grepl("MER", rep_name) ~ "MER",
    grepl("LTR|MLT|HERV|RTE", rep_name) ~ "LTR",
    grepl("MST", rep_name) ~ "MST",
    grepl("HUERS", rep_name) ~ "HUERS",
    grepl("HAL", rep_name) ~ "HAL",
    grepl("Tigger", rep_name) ~ "Tigger",
    grepl("SINE", rep_name) ~ "SINE",
    grepl("^L1|L2|L3|LINE", rep_name) ~ "L",
    grepl("Charlie", rep_name) ~ "Charlie",
    TRUE ~ "Others" ))
proportions_rhesus_mirgene <- complete_repeats_macaca_mirgene %>%
  group_by(class, rep_class_macaca) %>%
  summarise(count = n()) %>%
  group_by(class) %>%
  mutate(proportion = count / sum(count))
proportions_rhesus_repeats_barplot_mirgene = ggplot(proportions_rhesus_mirgene, aes(x = rep_class_macaca, y = proportion, fill = class)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  labs(title = "Distribution of Repeat classes by miRNA Class MIRGENE RHESUS", x = "Repeat Types", y = "Proportion") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=8)) 
facet_grid(~ rep_class_macaca)
ggsave("barplot_repeats_RHESUS_proportions_MIRGENE.pdf", proportions_rhesus_repeats_barplot_mirgene, width = 10, height = 6)
dev.off()
library(ggplot2)

###### COMPARATIVE REPEATS ANALYSIS HUMAN - TOPO - MACACA    .............. MIRGENE .............

repeats_comp_human_mirgene <- repeats_mirgene %>%
  mutate(comparative_rep = case_when(
    grepl("MIR|MER|SINE|FRAM|FLAM|tRNA", repeat_name) ~ "SINE",
    grepl("Alu", repeat_name) ~ "Alu",
    grepl("[()]|rich|REP", repeat_name) ~ "Simple repeat",
    grepl("^L|LINE|HAL|Charli", repeat_name) ~ "LINE",
    grepl("MADE|Tigger", repeat_name) ~ "DNA transposon",
    grepl("LTR", repeat_name) ~ "LTR",
    grepl("MLT|RTE|MST|HUERS|MTE|ORR1D1|RCHARR1|ORR1A3|ORR1E", repeat_name) ~ "RNA transposon",
    TRUE ~ "Others" ))

repeats_comp_mml_mirgene <- complete_repeats_macaca_mirgene %>%
  mutate(comparative_rep = case_when(
    grepl("MIR|MER|SINE|FRAM|FLAM|tRNA", rep_name) ~ "SINE",
    grepl("Alu", rep_name) ~ "Alu",
    grepl("[()]|rich|REP", rep_name) ~ "Simple repeat",
    grepl("^L|LINE|HAL|Plat_L3|Charlie17a|THE1B", rep_name) ~ "LINE",
    grepl("MADE|Tigger|X5a_DNA", rep_name) ~ "DNA transposon",
    grepl("LTR", rep_name) ~ "LTR",
    grepl("MLT|RTE|MST|HUERS|MTE|ORR1D1|RCHARR1|ORR1A3|ORR1E", rep_name) ~ "RNA transposon",
    TRUE ~ "Others" ))

repeats_comp_topo_mirgene <- complete_repeats_mouse_mirgene %>%
  mutate(comparative_rep = case_when(
    grepl("MIR|MER|SINE|FRAM|FLAM|B3|B3A|B4A|SINE|MIR|B2|B4|B1|tRNA", rep_name) ~ "SINE",
    grepl("Alu", rep_name) ~ "Alu",
    grepl("[()]|rich|REP", rep_name) ~ "Simple repeat",
    grepl("^L|LINE|HAL", rep_name) ~ "LINE",
    grepl("MADE|Tigger", rep_name) ~ "DNA transposon",
    grepl("LTR", rep_name) ~ "LTR",
    grepl("MLT|RTE|MST|HUERS|MTE|ORR1D1|RCHARR1|ORR1A3|ORR1E", rep_name) ~ "RNA transposon",
    TRUE ~ "Others"))

# HUMAN
human_comp_for_merging_mirgene = repeats_comp_human_mirgene[,c(2,1,15,11,16)]
human_comp_for_merging_mirgene <- cbind(human_comp_for_merging_mirgene, new_col = "HUMAN")
human_comp_for_merging_mirgene <- human_comp_for_merging_mirgene %>%
  mutate(status = str_to_title(status))
sorted_human_comp_mirgene <- human_comp_for_merging_mirgene[order(human_comp_for_merging_mirgene$chr), ]

# MOUSE
topo_comp_for_merging_mirgene = repeats_comp_topo_mirgene[,c(2,1,13,9,15)]
topo_comp_for_merging_mirgene <- cbind(topo_comp_for_merging_mirgene, new_col = "MOUSE")
topo_comp_for_merging_mirgene <- topo_comp_for_merging_mirgene %>%
  rename(#rep_class = rep_class_topo,
    mirna_name = "miRNA name",
    repeat_name = rep_name,
    status = "class")
library(dplyr)
library(stringr)
topo_comp_for_merging_mirgene <- topo_comp_for_merging_mirgene %>%
  mutate(status = str_to_title(status))
sorted_mouse_comp_mirgene <- topo_comp_for_merging_mirgene[order(topo_comp_for_merging_mirgene$chr), ]

# MACACA
macaca_comp_for_merging_mirgene = repeats_comp_mml_mirgene[, c(2,1,13,9,15)]
macaca_comp_for_merging_mirgene <- cbind(macaca_comp_for_merging_mirgene, new_col = "RHESUS")
macaca_comp_for_merging_mirgene <- macaca_comp_for_merging_mirgene %>%
  rename(#rep_class = rep_class_mml,
    mirna_name = "miRNA name",
    repeat_name = rep_name,
    status = "class")
macaca_comp_for_merging_mirgene <- macaca_comp_for_merging_mirgene %>%
  mutate(status = str_to_title(status))
sorted_macaca_comp_mirgene <- macaca_comp_for_merging_mirgene[order(macaca_comp_for_merging_mirgene$chr), ]

# MERGE AND PLOT
complete_comparison_rep_mirgene = rbind(sorted_human_comp_mirgene, sorted_macaca_comp_mirgene, sorted_mouse_comp_mirgene)
complete_comparison_rep_mirgene$status <- trimws(complete_comparison_rep_mirgene$status, "left")

# Calculate proportions for each class
proportions_data_mirgene <- complete_comparison_rep_mirgene %>%
  group_by(status, comparative_rep, new_col) %>% 
  summarise(count = n()) %>%
  group_by(status, comparative_rep) %>%
  mutate(proportion = count / sum(count))
COMPARATIVE_ANALYSIS_MIRGENE <- ggplot(proportions_data_mirgene, aes(x = comparative_rep, y = proportion, fill = new_col)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Repeat type", y = "Proportion", title = "Distribution of miRNAs in Repeat types MIRGENE") +
  scale_fill_manual(values = c("HUMAN" = "red", "MOUSE" = "green", "RHESUS" = "blue")) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 8)) +
  facet_grid(~ status)
ggsave("COMPARATIVE_REPEATS_ANALYSIS_MIRGENE.pdf", COMPARATIVE_ANALYSIS_MIRGENE, width = 10, height = 6)
dev.off()





#####################################################################     TISSUES EXPRESSIONS     ###################################################################

###################### MIRBASE

class_ok = read.table("class_ok.tsv", sep = "\t")
expr_MIRBASE = read.table("df_expression_MIRBASE.tsv", sep="\t")
expr_MIRBASE = expr_MIRBASE[,c(1:2,4:6)]
class_ok_no_coso <- class_ok
class_ok_no_coso$mirna_name <- gsub(">", "", class_ok$mirna_name)
expr_class_mirbase = merge(expr_MIRBASE, class_ok_no_coso, by.x = "mirna_name_stripped", by.y = "mirna_name")

# # Expression Patterns by Class
# library(ggplot2)
# expr1 <- ggplot(expr_class_mirbase, aes(x = status, y = max_value)) +
#   geom_boxplot() +
#   labs(title = "Expression Patterns by Class",
#        x = "Class",
#        y = "Expression Value") +
#   theme_minimal()
# ggsave("Expression_by_Class.pdf", expr1)#, width = 8, height = 6, units = "in")
# 
# # BARPLOT
# barplot_expr = ggplot(expr_class_mirbase, aes(x = tissue, y = max_value, fill = status)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Tissue", y = "Mean Value", title = "Expression Values") +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1))
# ggsave("expression_by_tissues.pdf", barplot_expr)
# 
# 
# # BOXPLOT
# install.packages("ggpubr")
# library(ggpubr)
# pdf("box.pdf")
# boxplot <- ggboxplot(expr_class_mirbase, x = "tissue", y = "max_value", fill = "status", 
#                      outlier.shape = NA, 
#                      add.params = list(color = "black", size = 0.7)) +
#   labs(x = "Tissue", y = "Max Value", title = "Boxplots of Max Values by Class Across Tissues") +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1))
# dev.off()
# 
# 
# # library(dplyr)
# # # Calculate the median of max_value for each mirna_name_stripped
# # median_max_value <- expr_class_mirbase %>%
# #   group_by(mirna_name_stripped) %>%
# #   summarize(median_max_value = median(max_value, na.rm = TRUE))
# # 
# # # Then I need to divide each max_value for the median_max_value for each miRNA
# # expr_class_mirbase <- merge(expr_class_mirbase, median_max_value, by = "mirna_name_stripped")
# # expr_class_mirbase$normalized_max_value <- expr_class_mirbase$max_value / expr_class_mirbase$median_max_value
# # 
# # library(ggplot2)
# # ggplot(expr_class_mirbase, aes(x = tissue, y = normalized_max_value)) +
# #   geom_boxplot() +
# #   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# 
# ggplot(expr_class_mirbase, aes(x = tissue, y = normalized_max_value, fill = status)) +
#   geom_boxplot() +
#   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
#   labs(title = "Boxplots of normalized_max_value by tissue",
#        x = "Tissue",
#        y = "Normalized Max Value",
#        fill = "Status")
# 
# # only expressed mirnas
# expr_class_mirbase_only_expr = expr_class_mirbase[expr_class_mirbase$normalized_max_value!="Inf" & expr_class_mirbase$max_value!=0,]
# 
# #
# inducible_expr = expr_class_mirbase[expr_class_mirbase$status=="Inducible",]
# dispensable_expr = expr_class_mirbase[expr_class_mirbase$status=="Dispensable",]
# resilient_expr = expr_class_mirbase[expr_class_mirbase$status=="Resilient",]
# spurious_expr = expr_class_mirbase[expr_class_mirbase$status=="Spurious",]
# 
# box_expr_inducible = boxplot(inducible_expr$normalized_max_value ~ inducible_expr$tissue,las = 2,outline = FALSE)
# box_expr_dispensable = boxplot(dispensable_expr$normalized_max_value ~ dispensable_expr$tissue,las = 2,outline = FALSE)
# box_expr_resilient= boxplot(resilient_expr$normalized_max_value ~ resilient_expr$tissue,las = 2,outline = FALSE)
# box_expr_spurious = boxplot(spurious_expr$normalized_max_value ~ spurious_expr$tissue,las = 2,outline = FALSE)
# 
# I_expr_zero = inducible_expr[inducible_expr$median_max_value==0,] # tot = 20520, zero = 8940, expr = 11580 --> 43% NOT expressed 
# S_expr_zero = spurious_expr[spurious_expr$median_max_value==0,] # tot = 16200, zero = 5160, expr = 11040 --> 31% NOT expressed
# D_expr_zero = dispensable_expr[dispensable_expr$median_max_value==0,] # tot = 38880, zero = 10740, expr = 28140 --> 27% NOT expressed
# R_expr_zero = resilient_expr[resilient_expr$median_max_value==0,] # tot = 22440, zero = 3900, expr = 18540 --> % 17% NOT expressed
# 
# 
# median_by_tissue <- inducible_expr %>%
#   group_by(tissue) %>%
#   summarize(median_normalized_max_value = median(normalized_max_value, na.rm = TRUE)) %>%
#   arrange(desc(median_normalized_max_value))
# 
# 
# hist(log2(expr_class_mirbase$value_3p+0.01))
# hist(log2(expr_class_mirbase$normalized_max_value), breaks = 20)


##############################################  EXPRESSION 

library(dplyr)
expr_class_mirbase <- expr_class_mirbase %>%
  group_by(mirna_name_stripped) %>%
  mutate(EXPRESSED = ifelse(max_value > 1, "YES", "NO"))

###############################################  ELEVATED

# add a column called "ELEVATED" by grouping by "mirna_name_stripped" and considering only the rows with "YES" in col "EXPRESSED". If 
# the "max_value" is at least twice the mean of the others, write "YES", else "NO"

expr_class_mirbase <- expr_class_mirbase %>%
  group_by(mirna_name_stripped) %>%
  mutate(ELEVATED = ifelse(EXPRESSED == "YES" & max_value >= 2 * mean(max_value, na.rm = TRUE), "YES", "NO"))

##############################################  SPECIFIC

# add a column called "SPECIFIC" by grouping by "mirna_name_stripped" and considering only the rows with "YES" in col "EXPRESSED". If 
# the "max_value" is at least four times the second max value of the others, write "YES", else "NO"

expr_class_mirbase <- expr_class_mirbase %>%
  group_by(mirna_name_stripped) %>%
  mutate(SPECIFIC = ifelse(EXPRESSED == "YES" & max_value >= 4 * nth(sort(max_value, decreasing = TRUE), 2), "YES", "NO"))


#############################################  PLOT
specific = expr_class_mirbase[expr_class_mirbase$SPECIFIC=="YES",]
elevated = expr_class_mirbase[expr_class_mirbase$ELEVATED=="YES",]
expressed_data <- expr_class_mirbase %>% filter(EXPRESSED == "YES")

#barplot(expressed_data$max_value~expressed_data$tissue)

I_expr = expressed_data[expressed_data$status=="Inducible",]
D_expr = expressed_data[expressed_data$status=="Dispensable",]
R_expr = expressed_data[expressed_data$status=="Resilient",]
S_expr = expressed_data[expressed_data$status=="Spurious",]

# head(I_expr)
# A tibble: 6 × 9
# Groups:   mirna_name_stripped [2]
# mirna_name_stripped tissue           value_3p value_5p max_value status    EXPRESSED ELEVATED SPECIFIC
# <chr>               <chr>               <dbl>    <dbl>     <dbl> <chr>     <chr>     <chr>    <chr>   
#   1 hsa-mir-11400       bronchus               NA       NA      1.12 Inducible YES       YES      NO      
# 2 hsa-mir-12135       muscle                 NA       NA      1.88 Inducible YES       NO       NO      
# 3 hsa-mir-12135       nucleus_caudatus       NA       NA      1.20 Inducible YES       NO       NO      
# 4 hsa-mir-12135       trachea                NA       NA      1.98 Inducible YES       NO       NO      
# 5 hsa-mir-12135       lymph_node             NA       NA      1.37 Inducible YES       NO       NO      
# 6 hsa-mir-12135       tongue                 NA       NA     18.9  Inducible YES       YES      YES    
# given a file like this, I need to group each mirna_name_stripped and plot barplots based on the ratio betwee 
# each mirna in each tissue over the total of the same mirna in that tissue. I need to have tissues on the x axis, while the 
# bars have to represent the number of mirnas present in that tissue divided its sum in all tissues

library(dplyr)
library(ggplot2)
total_mirnas_by_tissue <- I_expr %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

I_elevated = I_expr[I_expr$ELEVATED=="YES",]
total_mirnas_by_tissue <- I_elevated %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

I_spec = I_elevated[I_elevated$SPECIFIC=="YES",]
total_mirnas_by_tissue <- I_spec %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



##########  DISPENSABLE

total_mirnas_by_tissue <- D_expr %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "green") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

D_elevated = D_expr[D_expr$ELEVATED=="YES",]
total_mirnas_by_tissue <- D_elevated %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "green") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

D_spec = D_elevated[D_elevated$SPECIFIC=="YES",]
total_mirnas_by_tissue <- D_spec %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "green") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



#########  RESILIENT

total_mirnas_by_tissue <- R_expr %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

R_elevated = R_expr[R_expr$ELEVATED=="YES",]
total_mirnas_by_tissue <- R_elevated %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

R_spec = R_elevated[R_elevated$SPECIFIC=="YES",]
total_mirnas_by_tissue <- R_spec %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


##########  SPURIOUS

total_mirnas_by_tissue <- S_expr %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "violet") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

S_elevated = S_expr[S_expr$ELEVATED=="YES",]
total_mirnas_by_tissue <- S_elevated %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "violet") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

S_spec = S_elevated[S_elevated$SPECIFIC=="YES",]
total_mirnas_by_tissue <- S_spec %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "violet") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


#######  ALL CLASSES - specific
all_data <- rbind(
  mutate(I_spec, class = "I"),
  mutate(D_spec, class = "D"),
  mutate(R_spec, class = "R"),
  mutate(S_spec, class = "S")
)
total_mirnas_by_class_and_tissue <- all_data %>%
  group_by(class, tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped)) %>%
  ungroup()
total_mirnas_by_class <- total_mirnas_by_class_and_tissue %>%
  group_by(class) %>%
  summarise(total_mirnas_all = sum(total_mirnas))
total_mirnas_by_class_and_tissue <- total_mirnas_by_class_and_tissue %>%
  left_join(total_mirnas_by_class, by = "class") %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_class_and_tissue, aes(x = tissue, y = ratio, fill = class)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio", fill = "Class") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#######  ALL CLASSES - elevated
all_data_elevated <- rbind(
  mutate(I_elevated, class = "I"),
  mutate(D_elevated, class = "D"),
  mutate(R_elevated, class = "R"),
  mutate(S_elevated, class = "S")
)
total_mirnas_by_class_and_tissue <- all_data_elevated %>%
  group_by(class, tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped)) %>%
  ungroup()
total_mirnas_by_class <- total_mirnas_by_class_and_tissue %>%
  group_by(class) %>%
  summarise(total_mirnas_all = sum(total_mirnas))
total_mirnas_by_class_and_tissue <- total_mirnas_by_class_and_tissue %>%
  left_join(total_mirnas_by_class, by = "class") %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_class_and_tissue, aes(x = tissue, y = ratio, fill = class)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio", fill = "Class") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


# FISHER TEST --> odds ratio significativa e >1
contigency_table = matrix(c(elevated$status=="Dispensable" & elevated$tissue=="adrenal_gland", 
                            elevated$status=="Dispensable" & elevated$tissue!="adrenal_gland", 
                            elevated$status!="Dispensable" & elevated$tissue=="adrenal_gland", 
                            elevated$status!="Dispensable" & elevated$tissue!="adrenal_gland"), nrow=2, byrow = TRUE)
fisher.test(contigency_table)


contigency_table_X0_XY = matrix(c(enrich_chr_up_X0_XY$Freq_chr_up_X0_XY_Abs[23], 
                                  sum(enrich_chr_up_X0_XY$Freq_chr_up_X0_XY_Abs) 
                                  - enrich_chr_up_X0_XY$Freq_chr_up_X0_XY_Abs[23], 
                                  enrich_chr_up_X0_XY$Freq_chr_sample_Abs[23], 
                                  sum(enrich_chr_up_X0_XY$Freq_chr_sample_Abs) - 
                                    enrich_chr_up_X0_XY$Freq_chr_sample_Abs[23]), nrow=2, byrow = TRUE)
fisher.test(contigency_table_X0_XY)



# > head(elevated)
# # A tibble: 6 × 9
# # Groups:   mirna_name_stripped [1]
# mirna_name_stripped tissue           value_3p value_5p max_value status      EXPRESSED ELEVATED SPECIFIC
# <chr>               <chr>               <dbl>    <dbl>     <dbl> <chr>       <chr>     <chr>    <chr>   
#   1 hsa-let-7a-2        substantia_nigra     3.13       NA      3.13 Dispensable YES       YES      NO      
# 2 hsa-let-7a-2        white_matter         2.67       NA      2.67 Dispensable YES       YES      NO      
# 3 hsa-let-7a-2        thalamus             2.79       NA      2.79 Dispensable YES       YES      NO      
# 4 hsa-let-7a-2        spinal_cord          2.46       NA      2.46 Dispensable YES       YES      NO      
# 5 hsa-let-7a-2        atrium               2.45       NA      2.45 Dispensable YES       YES      NO      
# 6 hsa-let-7a-2        arachnoid_mater      5.00       NA      5.00 Dispensable YES       YES      NO      
# I need to perform a fisher test that gives a p-value for each tissue given the different statuses

library(dplyr)

compute_fisher_test <- function(df) {
  contingency_table <- table(df$status)
  if (ncol(contingency_table) == 1) {
    # If there's only one level of 'status', set p-value to NA
    p_value <- NA
  } else {
    p_value <- fisher.test(contingency_table)$p.value
  }
  return(p_value)
}

# Group by tissue and compute Fisher's exact test for each tissue
result <- elevated %>%
  group_by(tissue) %>%
  summarise(
    p_value = compute_fisher_test(.)
  )

# View the result
print(result)



####################### MIRGENE

mirgene_names = read.csv("mirgene_mrna_names.txt", header=F)
mirgene_names_vector <- mirgene_names$V1
mirgene_names_vector_no_coso = gsub(">", "", mirgene_names_vector)
mirgene_data_expr <- expr_class_mirbase[expr_MIRBASE$mirna_name_stripped %in% mirgene_names_vector_no_coso, ]
mirgene_data_expr = mirgene_data_expr[,1:6]

# # Expression Patterns by Class
# library(ggplot2)
# expr_mirgene <- ggplot(mirgene_data_expr, aes(x = status, y = max_value)) +
#   geom_boxplot() +
#   labs(title = "Expression Patterns by Class",
#        x = "Class",
#        y = "Expression Value") +
#   theme_minimal()
# ggsave("Expression_by_Class_mirgene.pdf", expr_mirgene)#, width = 8, height = 6, units = "in")
# 
# # BARPLOT
# barplot_expr_mirgene = ggplot(mirgene_data_expr, aes(x = tissue, y = max_value, fill = status)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Tissue", y = "Mean Value", title = "Expression Values") +
#   theme(axis.text.x = element_text(angle = 90, hjust = 1))
# ggsave("expression_by_tissues_mirgene.pdf", barplot_expr_mirgene)
# 
# 
# library(dplyr)
# # Calculate the median of max_value for each mirna_name_stripped
# median_max_value_mirgene <- mirgene_data_expr %>%
#   group_by(mirna_name_stripped) %>%
#   summarize(median_max_value = median(max_value, na.rm = TRUE))
# 
# # Then I need to divide each max_value for the median_max_value for each miRNA
# mirgene_data_expr <- merge(mirgene_data_expr, median_max_value_mirgene, by = "mirna_name_stripped")
# mirgene_data_expr$normalized_max_value <- mirgene_data_expr$max_value / mirgene_data_expr$median_max_value
# 
# ggplot(mirgene_data_expr, aes(x = tissue, y = normalized_max_value)) +
#   geom_boxplot() +
#   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# 
# 
# inducible_expr_mirgene = mirgene_data_expr[mirgene_data_expr$status=="Inducible",]
# dispensable_expr_mirgene = mirgene_data_expr[mirgene_data_expr$status=="Dispensable",]
# resilient_expr_mirgene = mirgene_data_expr[mirgene_data_expr$status=="Resilient",]
# spurious_expr_mirgene = mirgene_data_expr[mirgene_data_expr$status=="Spurious",]
# 
# box_expr_inducible_mirgene = boxplot(inducible_expr_mirgene$normalized_max_value ~ inducible_expr_mirgene$tissue,las = 2,outline = FALSE)
# box_expr_dispensable_mirgene = boxplot(dispensable_expr_mirgene$normalized_max_value ~ dispensable_expr_mirgene$tissue,las = 2,outline = FALSE)
# box_expr_resilient_mirgene = boxplot(resilient_expr_mirgene$normalized_max_value ~ resilient_expr_mirgene$tissue,las = 2,outline = FALSE)
# box_expr_spurious_mirgene = boxplot(spurious_expr_mirgene$normalized_max_value ~ spurious_expr_mirgene$tissue,las = 2,outline = FALSE)
# 
# I_expr_zero_mirgene = inducible_expr_mirgene[inducible_expr_mirgene$median_max_value==0,] # tot = 5065, zero = 2121, expr =  --> 41.9% NOT expressed 
# S_expr_zero_mirgene = spurious_expr_mirgene[spurious_expr_mirgene$median_max_value==0,] # tot = 4508, zero = 1669, expr =  --> 37% NOT expressed
# D_expr_zero_mirgene = dispensable_expr_mirgene[dispensable_expr_mirgene$median_max_value==0,] # tot = 5678, zero = 2817, expr =  --> % NOT expressed
# R_expr_zero_mirgene = resilient_expr_mirgene[resilient_expr_mirgene$median_max_value==0,] # tot = 4508, zero = 876, expr =  --> % % NOT expressed

##############################################  EXPRESSION 

library(dplyr)
mirgene_data_expr <- mirgene_data_expr %>%
  group_by(mirna_name_stripped) %>%
  mutate(EXPRESSED = ifelse(max_value > 1, "YES", "NO"))

###############################################  ELEVATED

# add a column called "ELEVATED" by grouping by "mirna_name_stripped" and considering only the rows with "YES" in col "EXPRESSED". If 
# the "max_value" is at least twice the mean of the others, write "YES", else "NO"

mirgene_data_expr <- mirgene_data_expr %>%
  group_by(mirna_name_stripped) %>%
  mutate(ELEVATED = ifelse(EXPRESSED == "YES" & max_value >= 2 * mean(max_value, na.rm = TRUE), "YES", "NO"))

##############################################  SPECIFIC

# add a column called "SPECIFIC" by grouping by "mirna_name_stripped" and considering only the rows with "YES" in col "EXPRESSED". If 
# the "max_value" is at least four times the second max value of the others, write "YES", else "NO"

mirgene_data_expr <- mirgene_data_expr %>%
  group_by(mirna_name_stripped) %>%
  mutate(SPECIFIC = ifelse(EXPRESSED == "YES" & max_value >= 4 * nth(sort(max_value, decreasing = TRUE), 2), "YES", "NO"))


#######################################  PLOT

specific_mirgene = mirgene_data_expr[mirgene_data_expr$SPECIFIC=="YES",]
elevated_mirgene = mirgene_data_expr[mirgene_data_expr$ELEVATED=="YES",]
expressed_data_mirgene <- mirgene_data_expr %>% filter(EXPRESSED == "YES")

I_expr_mirgene = expressed_data_mirgene[expressed_data_mirgene$status=="Inducible",]
D_expr_mirgene = expressed_data_mirgene[expressed_data_mirgene$status=="Dispensable",]
R_expr_mirgene = expressed_data_mirgene[expressed_data_mirgene$status=="Resilient",]
S_expr_mirgene = expressed_data_mirgene[expressed_data_mirgene$status=="Spurious",]

# Inducible
library(dplyr)
library(ggplot2)
total_mirnas_by_tissue <- I_expr_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

I_elevated_mirgene = I_expr_mirgene[I_expr_mirgene$ELEVATED=="YES",]
total_mirnas_by_tissue <- I_elevated_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

I_spec_mirgene = I_elevated_mirgene[I_elevated_mirgene$SPECIFIC=="YES",]
total_mirnas_by_tissue <- I_spec_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Dispensable

total_mirnas_by_tissue <- D_expr_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "green") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

D_elevated_mirgene = D_expr_mirgene[D_expr_mirgene$ELEVATED=="YES",]
total_mirnas_by_tissue <- D_elevated_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "green") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

D_spec_mirgene = D_elevated_mirgene[D_elevated_mirgene$SPECIFIC=="YES",]
total_mirnas_by_tissue <- D_spec_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "green") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Resilient

total_mirnas_by_tissue <- R_expr_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

R_elevated_mirgene = R_expr_mirgene[R_expr_mirgene$ELEVATED=="YES",]
total_mirnas_by_tissue <- R_elevated_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

R_spec_mirgene = R_elevated_mirgene[R_elevated_mirgene$SPECIFIC=="YES",]
total_mirnas_by_tissue <- R_spec_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


# Spurious

total_mirnas_by_tissue <- S_expr_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "violet") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

S_elevated_mirgene = S_expr_mirgene[S_expr_mirgene$ELEVATED=="YES",]
total_mirnas_by_tissue <- S_elevated_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "violet") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

S_spec_mirgene = S_elevated_mirgene[S_elevated_mirgene$SPECIFIC=="YES",]
total_mirnas_by_tissue <- S_spec_mirgene %>%
  group_by(tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped))
total_mirnas_all <- sum(total_mirnas_by_tissue$total_mirnas)
total_mirnas_by_tissue <- total_mirnas_by_tissue %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_tissue, aes(x = tissue, y = ratio)) +
  geom_bar(stat = "identity", fill = "violet") +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


#######  ALL CLASSES - elevated
all_data_specific_mirgene <- rbind(
  mutate(I_spec_mirgene, class = "I"),
  mutate(D_spec_mirgene, class = "D"),
  mutate(R_spec_mirgene, class = "R"),
  mutate(S_spec_mirgene, class = "S")
)
total_mirnas_by_class_and_tissue <- all_data_specific_mirgene %>%
  group_by(class, tissue) %>%
  summarise(total_mirnas = n_distinct(mirna_name_stripped)) %>%
  ungroup()
total_mirnas_by_class <- total_mirnas_by_class_and_tissue %>%
  group_by(class) %>%
  summarise(total_mirnas_all = sum(total_mirnas))
total_mirnas_by_class_and_tissue <- total_mirnas_by_class_and_tissue %>%
  left_join(total_mirnas_by_class, by = "class") %>%
  mutate(ratio = total_mirnas / total_mirnas_all)
ggplot(total_mirnas_by_class_and_tissue, aes(x = tissue, y = ratio, fill = class)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  labs(title = "Ratio of miRNAs in each tissue over total miRNAs across all tissues",
       x = "Tissue", y = "Ratio", fill = "Class") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))





###########################################################   TARGETS   #############################################################################

################## MIRBASE

# Brains are not differentiated
inducible_targets = read.csv("inducible_tissues.txt", sep=":", header=F,col.names = c("Tissue", "Count")) 
barplot(inducible_targets$Count, 
        main="Count of Tissues targeted by inducible miRNAs (MIRBASE)",
        xlab="", 
        ylab="Count",
        names.arg=inducible_targets$Tissue,
        col="green",
        las=2,
        cex.names=0.5)
# Brains are differentiated
inducible_targets_full = read.csv("inducible_tissues_full.txt", sep=":", header=F,col.names = c("Tissue", "Count"))
barplot(inducible_targets_full$Count, 
        main="Count of Tissues targeted by inducible miRNAs (MIRBASE)",
        xlab="", 
        ylab="Count",
        names.arg=inducible_targets_full$Tissue,
        col="lightgreen",
        las=2,
        cex.names=0.5)


#################### MIRGENE

inducible_targets_mirgene = read.csv("inducible_tissues_mirgene.txt", sep=":", header=F,col.names = c("Tissue", "Count")) 
barplot(inducible_targets_mirgene$Count, 
        main="Count of Tissues targeted by inducible miRNAs (MIRGENE)",
        xlab="", 
        ylab="Count",
        names.arg=inducible_targets_mirgene$Tissue,
        col="violet",
        las=2,
        cex.names=0.5)
# Brains are differentiated
inducible_targets_full_mirgene = read.csv("inducible_tissues_full_mirgene.txt", sep=":", header=F,col.names = c("Tissue", "Count"))
barplot(inducible_targets_full_mirgene$Count, 
        main="Count of Tissues targeted by inducible miRNAs (MIRBASE)",
        xlab="", 
        ylab="Count",
        names.arg=inducible_targets_full_mirgene$Tissue,
        col="lightpink",
        las=2,
        cex.names=0.5)

###########################################################    CONSERVAZIONE  ############################################################

################  MIRBASE

tab_conserv_class_mirbase = read.csv("3_tabella_conservazione.tsv", sep="\t")
colnames(tab_conserv_class_mirbase) = c("mirna","macaca","lemur","topo", "gatto", "maiale", "mucca", "gallo", "rana", "zebrafish", 
"taki", "human_CLASS", "human_PREDICTION")
#write.table(tab_conserv_class_mirbase, "tabella_conservazione_mirbase.tsv", sep="\t", row.names = F)

library(dplyr)
tab_conserv_class_mirbase <- tab_conserv_class_mirbase %>%
  mutate(ORTH_percentage = rowMeans(select(., matches("^(macaca|lemur|topo|gatto|maiale|mucca|gallo|rana|zebrafish|taki)$")) == "ORTH") * 100)




###############  MIRGENE

tab_conserv_class_mirgene = merge(mirgene_names_ok, tab_conserv_class_mirbase, by="mirna")
#write.table(tab_conserv_class_mirgene, "tabella_conservazione_mirgene.tsv", sep="\t", row.names = F)

library(dplyr)
tab_conserv_class_mirgene <- tab_conserv_class_mirgene %>%
  mutate(ORTH_percentage = rowMeans(select(., matches("^(macaca|lemur|topo|gatto|maiale|mucca|gallo|rana|zebrafish|taki)$")) == "ORTH") * 100)
